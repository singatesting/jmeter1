<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Precondition Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408552334000</longProp>
        <longProp name="ThreadGroup.end_time">1408552334000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler guiclass="org.apache.jmeter.protocol.spring.control.gui.SpringBeanShellSamplerGui" testclass="org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler" testname="Load CMR Objects" enabled="true">
          <stringProp name="context">testContext.xml</stringProp>
          <stringProp name="BeanShellSampler.query">  
import com.mgh.cm_common.LoadCMRObjects;
import com.mgh.cmi.TOCService;
import com.mgh.cmr.CMRService;


props = (Properties) sCtx.getBean(&quot;external&quot;);
for(Object key : props.keySet()) {
  System.out.println(key.toString() + &quot; &quot; + props.get(key).toString());
  System.setProperty(key.toString(), props.get(key).toString());
}
LoadCMRObjects loadCMRObjects = new LoadCMRObjects();
loadCMRObjects.setCmr((CMRService) sCtx.getBean(&quot;cmr&quot;));
loadCMRObjects.setToc((TOCService) sCtx.getBean(&quot;toc&quot;));
loadCMRObjects.reloadAll();</stringProp>
        </org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408552339000</longProp>
        <longProp name="ThreadGroup.end_time">1408552339000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler guiclass="org.apache.jmeter.protocol.spring.control.gui.SpringBeanShellSamplerGui" testclass="org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler" testname="CMR Search by Standard" enabled="true">
          <stringProp name="context">testContext.xml</stringProp>
          <stringProp name="BeanShellSampler.query">  
import com.mgh.cmr.colorado.networks.NETworksService;
import com.mgh.cmr.colorado.networks.SSBrowseRequest;
import com.mgh.cmr.colorado.ContentAreaEnum;
import com.mgh.cmr.colorado.LocateAssetsRequest;
import com.mgh.cmr.colorado.ShowInSearchEnum;
import com.mgh.cmr.colorado.BrowseResults;


        networks = (NETworksService) sCtx.getBean(&quot;networks&quot;);

	   SSBrowseRequest request = new SSBrowseRequest();
        request.setSsAssetId(10444101L); //Standard Id
        request.setProgramAssetId(100000267598L); //Book Id
        request.setUserId(null); // User Id
        request.setTargetAudience(null); //Teacher or Students        

        request.setAssetCategory(ShowInSearchEnum.ALL); // Look for PUBLIC, CMS or ALL Assets
        
        request.setContentArea(ContentAreaEnum.EM4); // Program Content Area        
        request.setRetrieveAllAttributes(false); // Details?

        Set facets = new HashSet();
        facets.add(&quot;asset_type_name&quot;);
        facets.add(&quot;TAG&quot;);        
        request.setFacetsToReturn(facets);
        
        //request.setFastFirstN(false);
        request.setInit(LocateAssetsRequest.InitEnum.HITS_AND_FACETS);
        //Pagination 
//        request.setFromRow(1);
//        request.setToRow(6);        
        request.setFacets(null);
        request.setSortOrder(null);
        request.setAccessType(null);        
        request.setMinFacetsPerGroup(2);
        request.setForceUpdateCache(false); //If true Retrieve from DB refreshing cache
                

        // The search results
        BrowseResults result = networks.searchByStateStd(request);

        return result.getAssets();</stringProp>
        </org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler guiclass="org.apache.jmeter.protocol.spring.control.gui.SpringBeanShellSamplerGui" testclass="org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler" testname="CMR Search by Tag" enabled="true">
          <stringProp name="context">testContext.xml</stringProp>
          <stringProp name="BeanShellSampler.query">  
import com.mgh.cmr.colorado.networks.NETworksService;
import com.mgh.cmr.colorado.networks.ResLibFindRequest;
import com.mgh.cmr.colorado.ContentAreaEnum;
import com.mgh.cmr.colorado.LocateAssetsRequest;
import com.mgh.cmr.colorado.ShowInSearchEnum;
import com.mgh.cmr.colorado.networks.ResLibFindResults;
import com.mgh.mt.commons.vo.StateEnum; 

        networks = (NETworksService) sCtx.getBean(&quot;networks&quot;);

ResLibFindRequest request = new ResLibFindRequest();
        Set nodes = new HashSet();
        nodes.add(100000181538l);
        request.setNodeIDs(nodes);
        request.setRetrieveAllAttributes(false);
        request.setContentArea(ContentAreaEnum.MATH);
        request.setProgramAssetId(100000181538l);
        Set facetsToReturn = new HashSet();
        facetsToReturn.add(&quot;asset_type_name&quot;);
        //facetsToReturn.add(&quot;TAG&quot;);
	   facetsToReturn.add(&quot;GROUP&quot;);   // c2j/math     
        request.setFacetsToReturn(facetsToReturn);
        request.setFastFirstN(false);
        request.setInit(LocateAssetsRequest.InitEnum.HITS_AND_FACETS);
  //Pagination 
  //      request.setFromRow(1);
  //      request.setToRow(6);
        Map facets = new HashMap();
       /* List tags = new ArrayList();
        tags.add(&quot;1101&quot;);
        facets.put(&quot;TAG&quot;,tags);
        request.setFacets(facets); */
        request.setAssetCategory(ShowInSearchEnum.ALL);
        request.setLocale(StateEnum.OH);
        request.setMinFacetsPerGroup(2);
        request.setForceUpdateCache(false);

        ResLibFindResults results = networks.findWithin(request);	
        return results;   

/* ContentAreaEnum =
MATH (c2j)
SSH
EM4
NWBB / STUDIO
RD14
*/</stringProp>
        </org.apache.jmeter.protocol.spring.sampler.SpringBeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
